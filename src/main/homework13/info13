Слои Service и Controller

Задание
Усовершенствуйте проект: создайте классы FamilyController и FamilyService для работы с объектами типа Family.

Технические требования:

Создайте класс FamilyService, который должен содержать поле FamilyDao для доступа к хранящимся данным.
Класс FamilyService должен реализовывать методы (если в FamilyDao для реализации не хватает каких-то методов - добавьте их и реализуйте в CollectionFamilyDao):


getAllFamilies - получить список всех семей.

displayAllFamilies - вывести на экран все семьи (в индексированном списке) со всеми членами семьи.

getFamiliesBiggerThan - найти семьи с количеством людей больше чем (принимает количество человек и возвращает все семьи где количество людей больше чем указанное); выводит информацию на экран.

getFamiliesLessThan - найти семьи с количеством людей меньше чем (принимает количество человек и возвращает все семьи где количество людей меньше чем указанное); выводит информацию на экран.

countFamiliesWithMemberNumber - подсчитать число семей с количеством людей равное переданному числу.

createNewFamily - создать новую семью (принимает 2 параметра типа Human) - создает новую семью, сохраняет в БД.

deleteFamilyByIndex - удалить семью по индексу в списке - удаляет семью из БД.

bornChild - родить семьей ребенка (принимает Family и 2 типа String: мужское и женское имя) - в данной семье появляется новый ребенок с учетом данных родителей, информация о семье обновляется в БД; метод возвращает обновленную семью. Если рожденный ребенок мальчик - ему присваивается мужское имя, если девочка - женское.

adoptChild - усыновить ребенка (принимает 2 параметра: Family, Human)- в данной семье сохраняется данный ребенок, информация о семье обновляется в БД; метод возвращает обновленную семью.

deleteAllChildrenOlderThen - удалить детей старше чем (принимает int) - во всех семьях удаляются дети, которые старше указанно возраста, информация обновляется в БД.

count - возвращает количество семей в БД.

getFamilyById - принимает индекс семьи, возвращает Family по указанному индексу.

getPets - принимает индекс семьи, возвращает список домашних животных, которые живут в семье.

addPet - принимает индекс семьи и параметр Pet - добавляет нового питомца в семью, обновляет данные в БД.


Создайте класс FamilyController, который должен содержать поле FamilyService для доступа к методам бизнес-логики приложения.
Класс FamilyController должен реализовывать все методы, которые есть в FamilyService.
В классе Main вызовите все методы из FamilyController, чтобы продемонстрировать их работоспособность.
Покройте все методы из Familyervice юнит тестами.


Литература:

Service Layer (Сервисный уровень)
Уровни DAO и Service
Service layer pattern